<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Water Spinach</title><link href="http://khuevu.com/" rel="alternate"></link><link href="http://feeds.khuevu.com/feeds/programming.atom.xml" rel="self"></link><id>http://khuevu.com/</id><updated>2013-04-20T00:00:00+08:00</updated><entry><title>Bypass port block by firewall with Tor</title><link href="http://khuevu.com/2013/04/20/bypass-portblock-firewall.html" rel="alternate"></link><updated>2013-04-20T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2013-04-20:2013/04/20/bypass-portblock-firewall.html</id><summary type="html">&lt;p&gt;Your network adminstrator often configure the firewall to only allow certain port for outgoing &lt;span class="caps"&gt;TCP&lt;/span&gt; connection like 80 (&lt;span class="caps"&gt;HTTP&lt;/span&gt;), 443 (&lt;span class="caps"&gt;HTTPS&lt;/span&gt;), 22 (&lt;span class="caps"&gt;SSH&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;It is a problem if you are using other protocol to communicate to outside world, for example, &lt;span class="caps"&gt;IRC&lt;/span&gt;,&amp;nbsp;git. &lt;/p&gt;
&lt;p&gt;One solution is to find an alternative endpoint (use https for git, webchat programs for irc), but they are not always&amp;nbsp;available. &lt;/p&gt;
&lt;p&gt;The second solution is to have a generic program to wrap your packages in another &lt;span class="caps"&gt;TCP&lt;/span&gt; connection using an allowed port; and have a server of yours outside the firewall, listening on that port, unwrap the connection to get the original packages and send it using the desired protocol. This method is called tunneling, you can use existing program like &lt;span class="caps"&gt;SSH&lt;/span&gt;. I have written a &lt;a href="http://khuevu.github.io/2012/09/17/http-tunnel.html"&gt;tunnel program&lt;/a&gt; using &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;connection. &lt;/p&gt;
&lt;p&gt;But what if you don&amp;#8217;t have a server outside of the&amp;nbsp;firewall? &lt;/p&gt;
&lt;p&gt;The solution I want to discuss here is using Tor client and leverage on their network of Tor&amp;nbsp;bridges.&lt;/p&gt;
&lt;p&gt;First, Download Tor &lt;a href="https://www.torproject.org/download/download-easy.html.en"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go to the installation folder. In your &lt;code&gt;./Data/Tor/torrc&lt;/code&gt; config file, update these&amp;nbsp;entry: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;ReachableAddresses *:80,*:443
ReachableAddresses reject *:*
SocksListenAddress 127.0.0.1
SocksPort 9150
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The ReachableAddresses are addresses your firewall allows you to connect. 
&lt;code&gt;SocksListenAddress&lt;/code&gt; and &lt;code&gt;SocksPort&lt;/code&gt; are the host and port your Tor client listens on. Data sent here will be route to the Tor network using one of the reachable addresses and then to the desired&amp;nbsp;destination. &lt;/p&gt;
&lt;p&gt;You can add the proxy information if you uses a proxy here as&amp;nbsp;well. &lt;/p&gt;
&lt;p&gt;The last step is to start Tor client by running the script in the installation&amp;nbsp;folder. &lt;/p&gt;
&lt;p&gt;The point of this article is to rely on existing tor network instead of setting your own external server. I think, however, Tor is a project with great cause. So consider contributing to the project by adding your Tor relay server to the network too: &lt;a href="https://cloud.torproject.org"&gt;https://cloud.torproject.org&lt;/a&gt;&lt;/p&gt;</summary><category term="firewall"></category><category term="tunnel"></category></entry><entry><title>ActionBar Tab with Pager</title><link href="http://khuevu.com/2013/04/10/actionbartab-with-pager.html" rel="alternate"></link><updated>2013-04-10T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2013-04-10:2013/04/10/actionbartab-with-pager.html</id><summary type="html">&lt;p&gt;There are a number of questions on stackoverflow about this. In Android &lt;span class="caps"&gt;API&lt;/span&gt;, the ActionBar provides you with the capability of navigating Fragments in Tab mode, while Pager enables swiping of Fragments. And sometimes you will want to have both of these to enhance the user experience. This is a tutorial on how to combine both types of navigation in one&amp;nbsp;activity.&lt;/p&gt;
&lt;p&gt;In the implementation, the idea is to bind the event listener of ActionBar&amp;#8217;s TabListener and ViewPager&amp;#8217;s OnPageChangeListener into one class. So when there is event triggered in one component (tab or pager), you can invoke the respective action on the&amp;nbsp;other. &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TabPagerAdapter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;FragmentPagerAdapter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ActionBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TabListener&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewPager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OnPageChangeListener&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SherlockFragmentActivity&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ViewPager&lt;/span&gt; &lt;span class="n"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fragments&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TabPagerAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SherlockFragmentActivity&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewPager&lt;/span&gt; &lt;span class="n"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSupportFragmentManager&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;activity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;viewPager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOnPageChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fragments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addTab&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Tab&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fragmentClass&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IllegalAccessException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InstantiationException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSupportActionBar&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;addTab&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTabListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;fragments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragmentClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;notifyDataSetChanged&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onTabSelected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Tab&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FragmentTransaction&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCurrentItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPosition&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onTabReselected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Tab&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FragmentTransaction&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;viewPager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCurrentItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPosition&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onPageSelected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSupportActionBar&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getTabAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// some interface methods like onTabUnSelected is obmitted for brevity&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Fragment&lt;/span&gt; &lt;span class="nf"&gt;getItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fragments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSupportActionBar&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getTabCount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For example, in &lt;code&gt;addTab&lt;/code&gt;, besides adding tab with ActionBar.addTab, you need to call notifyDataSetChanged() of the FragmentPagerAdapter as well. The rest is pretty much&amp;nbsp;self-explained. &lt;/p&gt;
&lt;p&gt;In the layout file, declare a Layout with ViewPager component&amp;nbsp;inside: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vertical&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;android.support.v4.view.ViewPager&lt;/span&gt;
    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/pager&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In your Activity class, create an instance of TabPagerAdapter and add new Tabs with their respective&amp;nbsp;classes:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;requestWindowFeature&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FEATURE_INDETERMINATE_PROGRESS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ActionBar&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getSupportActionBar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNavigationMode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ActionBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NAVIGATION_MODE_TABS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDisplayShowTitleEnabled&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNavigationMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionBar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NAVIGATION_MODE_TABS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ViewPager&lt;/span&gt; &lt;span class="n"&gt;pager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ViewPager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pager&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;TabPagerAdapter&lt;/span&gt; &lt;span class="n"&gt;tabPagerAdapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TabPagerAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pager&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;tabPagerAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addTab&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newTab&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Browse&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;CategoryListFragment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;tabPagerAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addTab&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newTab&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Home&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;HomeFragment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IllegalAccessException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InstantiationException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="android"></category></entry><entry><title>Firefox OS on Galaxy Nexus - Review</title><link href="http://khuevu.com/2013/02/15/firefoxOs-galaxynexus-review.html" rel="alternate"></link><updated>2013-02-15T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2013-02-15:2013/02/15/firefoxOs-galaxynexus-review.html</id><summary type="html">&lt;p&gt;Smartphone landscape has never been this hot, with &lt;span class="caps"&gt;RIM&lt;/span&gt; introduces their new &lt;span class="caps"&gt;OS&lt;/span&gt; platform, &lt;a href="http://sg.blackberry.com/software/smartphones/blackberry-10-os.html"&gt;Blackberry 10 &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/a&gt;. The Software have been a critical wining factor in the phone war. It appeals to users in two ways: providing the best user experience or creating a strong ecosystem. The later can be acchieved by being attractive to application developers. The two late commer, Ubuntu and Firefox are doing just that. The new &lt;a href="http://www.ubuntu.com/devices/phone"&gt;Ubuntu for Phone&lt;/a&gt; is recently released. It emphasises on the large community already supporting Ubuntu platform. &lt;a href="https://developer.mozilla.org/en/docs/Mozilla/Firefox_OS"&gt;Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/a&gt;, which is under heavy development, portraits itself as the platform of Open Web Applications. It enables developers to write platform-independent applications in &lt;span class="caps"&gt;HTML5&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; and&amp;nbsp;Javascript. &lt;/p&gt;
&lt;p&gt;While other smartphone OSes might also support the deployment of web apps, Firefox &lt;span class="caps"&gt;OS&lt;/span&gt; caught my interest by its different proposition: Web apps will be the first-class citizen. Device-level functions like phone call or sms which are usually served by native apps could be built into web apps with the &lt;a href="https://wiki.mozilla.org/WebAPI"&gt;Web Runtime &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I have tried buiding and flashing Firefox &lt;span class="caps"&gt;OS&lt;/span&gt; into my Galaxy Nexus phone. Here are the&amp;nbsp;screenshots:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lock Screen" src="/images/firefoxos1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lock&amp;nbsp;Screen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Setting" src="/images/firefoxos2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Standard setting screen with &lt;code&gt;Do not track&lt;/code&gt; option&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Notification Bar" src="/images/firefoxos5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Notification Bar as in&amp;nbsp;Android&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Swipe" src="/images/firefoxos6.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From home screen, you swipe left or right to access app icons or market&amp;nbsp;places&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Apps are pre-grouped into different categories like &lt;code&gt;social&lt;/code&gt;, &lt;code&gt;news&lt;/code&gt;&amp;#8230; As you can see, the graphic doesn&amp;#8217;t scale very well to match the screen&amp;nbsp;size. &lt;/p&gt;
&lt;p&gt;&lt;img alt="News" src="/images/firefoxos7-0.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;News&amp;nbsp;Group&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Contact View" src="/images/firefoxos3-1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Contact&amp;nbsp;view&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Market Place" src="/images/firefoxos8.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Market&amp;nbsp;Place&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Facebook" src="/images/firefoxos7-1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inside an&amp;nbsp;app&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The overall experience is that it is still buggy and slow. My experience is short-live as there is a bug in which Firefox &lt;span class="caps"&gt;OS&lt;/span&gt; doesn&amp;#8217;t support soft buttons for phone without hardware button. So I have no way to go back to home screen other than restart the phone. If you up to the challenge and believe in the future of Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;, you should try fixing this&amp;nbsp;bug. &lt;/p&gt;</summary><category term="firefox"></category><category term="android"></category><category term="nexus"></category></entry><entry><title>Application Design with Hibernate</title><link href="http://khuevu.com/2013/01/20/understand-hibernate.html" rel="alternate"></link><updated>2013-01-20T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2013-01-20:2013/01/20/understand-hibernate.html</id><summary type="html">&lt;p&gt;This article aims to discuss the basic design pattern of a web application using Hibernate; the basic concepts that you need to know well before actually implementing a Hibernate-based application. Hibernate Documentation can be a little bit confusing sometimes. This article tries to distill the important points to help you have a better understanding of Hibernate. And if you are already using Hibernate, hope it is still useful for you. Fundamentals always serves as building blocks for advanced techniques, an idea well illustrated in old time Chinese martial art&amp;nbsp;movies. &lt;/p&gt;
&lt;h2&gt;Hibernate&amp;#8217;s business&amp;nbsp;case:&lt;/h2&gt;
&lt;p&gt;Hibernate has &lt;code&gt;Session&lt;/code&gt; object as its persistence interface. All of the database operations can be invoked through the &lt;code&gt;Session&lt;/code&gt; object. This &lt;code&gt;Session&lt;/code&gt; object should be accessed from a single thread. How long a &lt;code&gt;Session&lt;/code&gt; object lives will be determined by your application design and its business use&amp;nbsp;case. &lt;/p&gt;
&lt;p&gt;Why? when designing a business application, operations are grouped into business transaction, in which, all operations are considered successfully executed only if none of them fail to execute. For example, in a online shopping application, operation to deduct the sold quality from available stock and operation of getting payment from customers are grouped into one transaction. Only when payment is made successfully, the former one is persisted. In other words, a business transaction coordinates the writing out of changes to affected data. Some data can only be meaningfully changed if other is changed too. And in Hibernate, a &lt;code&gt;Session&lt;/code&gt; represents exactly that, a business transaction or a &lt;code&gt;unit of work&lt;/code&gt;, a term used by &lt;a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/transactions.html#transactions-locking"&gt;Hibernate documentation&lt;/a&gt;. In this article, we use the terms business transaction, unit of work, conversation&amp;nbsp;interchangably. &lt;/p&gt;
&lt;p&gt;Hibernate is mainly designed for web application. In which, A &lt;code&gt;Session&lt;/code&gt;, therefore, can span a request (session-per-request) or a conversation - multiple requests, response cycles (however, you should not keep the Session for a long conversion. We will discuss this&amp;nbsp;later).  &lt;/p&gt;
&lt;p&gt;So how exactly a &lt;code&gt;Session&lt;/code&gt; is related to a business transaction, and why we need to decide how we keep the &lt;code&gt;Session&lt;/code&gt;? &lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Session&lt;/code&gt; is not only an abstract layer for your database operations, but also an objects cache. When an object is loaded from a &lt;code&gt;Session&lt;/code&gt;, Hibernate caches it in memory. This object is often called &lt;code&gt;managed object&lt;/code&gt;. A particular &lt;code&gt;Session&lt;/code&gt; always knows which objects it has loaded. When flush is called on this &lt;code&gt;Session&lt;/code&gt;, Hibernate check for modification on the object (dirty check) and the change made to the object, if any, is automatically flushed to&amp;nbsp;database. &lt;/p&gt;
&lt;p&gt;This mechanism is perfectly suitable for a match between a &lt;code&gt;Session&lt;/code&gt; and a business transaction. Change during a transaction is staged in memory - &lt;code&gt;Session&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s cache. Change is persisted by flushing the change to database. If there is error, i.e, Hibernate throws exceptions, &lt;code&gt;Session&lt;/code&gt; object needs to be discarded, database changes need to be rolled back if necessary. A &lt;code&gt;Session&lt;/code&gt; also does version checking of managed object when updating to database to detect changes made to this data entity between the time it is loaded to memory and the time it is persisted back to database, which ensures the data integrity during a&amp;nbsp;transaction. &lt;/p&gt;
&lt;h2&gt;Hibernate&amp;#8217;s Design&amp;nbsp;Pattern:&lt;/h2&gt;
&lt;p&gt;From Hibernate &lt;a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/transactions.html#transactions-basics"&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Session is an inexpensive, non-threadsafe object that should be used once and then discarded for. A Session will not obtain a &lt;span class="caps"&gt;JDBC&lt;/span&gt; Connection, or a Datasource, unless it is needed. It will not consume any resources until&amp;nbsp;used. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Hibernate Session can span multiple physical database transactions. Hibernate &lt;code&gt;Session&lt;/code&gt; will acquire a &lt;span class="caps"&gt;JDBC&lt;/span&gt; connection when transaction start. That means all communication with database must occur inside a transaction. When transaction is committed, Hibernate will release the collection. Typically, your data access code will&amp;nbsp;be: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beginTransaction&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//do some work&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rollback&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The code above is simplest form to give you an idea of different steps handling a &lt;code&gt;Session&lt;/code&gt;. Usually, you should access the &lt;code&gt;Session&lt;/code&gt; object through &lt;code&gt;SessionFactory.getCurrentSession&lt;/code&gt;, or putting the transaction boiler plate code in a filter or &lt;span class="caps"&gt;AOP&lt;/span&gt; interceptor&amp;nbsp;instead. &lt;/p&gt;
&lt;p&gt;If, outside a transaction, you try to access a data object or its laizly initialized property (we will talk about it later) exception will be thrown by Hibernate. You will need to start &lt;span class="caps"&gt;DB&lt;/span&gt; transactions to write to &lt;span class="caps"&gt;DB&lt;/span&gt; or transactions to read only. That&amp;#8217;s why you might have several physical transactions over a Session - a business transaction. We will discuss these scenarios nextby considering some of the design pattern for Hibernate web&amp;nbsp;application: &lt;/p&gt;
&lt;h3&gt;Session per&amp;nbsp;Request:&lt;/h3&gt;
&lt;p&gt;Your business transaction spans only one request. For each thread that handles incoming request, a new &lt;code&gt;Session&lt;/code&gt; is opened and closed after processing is&amp;nbsp;finished. &lt;/p&gt;
&lt;p&gt;You might encountered a problem with this design. Your &lt;code&gt;Session&lt;/code&gt; object is normally closed when the main processing logic is completed but before your application renders view to return to client. When rendering view, some uninitialized data might need to retrieved for displayed; but the &lt;code&gt;Session&lt;/code&gt; is already closed. A typical scenario is displaying collection which is marked as &lt;code&gt;LazyInitialization&lt;/code&gt;. One feature of Hibernate is Lazy Loading. In &lt;span class="caps"&gt;ORM&lt;/span&gt;, relations between tables are represented as properties of collections in a object model. When retriveing the object from database, if the object&amp;#8217;s collection is lazy loaded, Hibernate defers the retrieval of the collection until being queried. It helps avoid overflow of available memory due to large&amp;nbsp;collections. &lt;/p&gt;
&lt;p&gt;The solution to this problem is keep the session open until the view rendered completely but just before the response is returned to client (&lt;code&gt;Open Session In View&lt;/code&gt;). Alternatively, you can have two &lt;span class="caps"&gt;DB&lt;/span&gt; transactions for one &lt;code&gt;Session&lt;/code&gt;. The first transaction is opened for main logic processing. Don&amp;#8217;t discard the &lt;code&gt;Session&lt;/code&gt; after that. The second transaction is a read only transaction started during rendering phase. You can find a very good article about these solutions &lt;a href="https://community.jboss.org/wiki/OpenSessionInView"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Extended Session - Session per&amp;nbsp;conversation&lt;/h3&gt;
&lt;p&gt;Your business transaction spans multiple request-reply cycles. In this Extended Session pattern, you reused the &lt;code&gt;Session&lt;/code&gt; object between requests and only discard it when the unit of work complete. The &lt;code&gt;Session&lt;/code&gt; object is bind to the conversation by storing in the &lt;code&gt;HttpSession&lt;/code&gt;. The &lt;code&gt;Session&lt;/code&gt; should keep the transaction boundary within a request processing&amp;nbsp;time:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Obtain new Session at the begining of unit of work.&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFlushMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlushMode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NEVER&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// IMPORTANT&lt;/span&gt;

&lt;span class="c1"&gt;//Obtain new JDBC Connection, start DB Transaction&lt;/span&gt;
&lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beginTransaction&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; 
&lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// release JDBC Connection during the unit of work. Waiting for user next request.&lt;/span&gt;
&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;Session&lt;/code&gt; should be disconnectied from &lt;span class="caps"&gt;JDBC&lt;/span&gt; connection during user think time by calling &lt;code&gt;tx.commit()&lt;/code&gt;. Note that you need to set the &lt;code&gt;FlushMode&lt;/code&gt; to &lt;code&gt;NEVER&lt;/code&gt;. The &lt;code&gt;tx.commit()&lt;/code&gt; will auto flush the session otherwise. We are still in a unit of work (business transaction), thus we don&amp;#8217;t want to flush the cahnge to database yet. (I believe there is a bug in Hibernate documentation, in which it states that the &lt;code&gt;FlushMode.MANUAL&lt;/code&gt; will prevent the flushing when a transaction is committed. But the &lt;a href="http://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Transaction.html"&gt;java doc&lt;/a&gt; says the&amp;nbsp;former&amp;#8217;)&lt;/p&gt;
&lt;p&gt;The next request within the same unit of work, the &lt;code&gt;Session&lt;/code&gt; object will open another database&amp;nbsp;transaction: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beginTransaction&lt;/span&gt; &lt;span class="c1"&gt;// same Session, obtain new JDBC Connection&lt;/span&gt;

&lt;span class="c1"&gt;//previously loaded foo object. &lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;Session&lt;/code&gt; knows the foo object is the one it loaded previously. At the last transaction in the conversation, we flush the change to database and discard the &lt;code&gt;Session&lt;/code&gt;: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Change made to the foo object will be flushed to database. This approach is efficient in database access. No resource is used until needed. Refer to this &lt;a href="https://community.jboss.org/wiki/OpenSessionInView#What_about_the_extended_Session_pattern_for_long_Conversations"&gt;article&lt;/a&gt; for more&amp;nbsp;details. &lt;/p&gt;
&lt;p&gt;And you should never have a long transaction spanning the whole conversation. Having a long database transaction not only hogs resource but also leads to stale data due to concurrent access. StaleObjectStateException will be thrown. It prevents your application to scale concurrently. (Do note that within a thread, a single database transaction is going to perform better than many small transactions, &lt;a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/transactions.html#transactions-demarcation"&gt;even for reading data&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This pattern, however, is not suitable for a long conversation. With loaded objects kept in memory, you will soon run hit OutOfMemory error if you keep the &lt;code&gt;Session&lt;/code&gt; for too long. So for a long conversation, we use an alternative&amp;nbsp;approach. &lt;/p&gt;
&lt;h3&gt;Detached Session - For long&amp;nbsp;conversation&lt;/h3&gt;
&lt;p&gt;To keep memory from overflowing during a long conversation, we use a new session for each user interaction. In this pattern, the staging change will be kept by mean of persistent objects. The managed objects that change is made directly to. You keep these objects between interactions, detach them from old &lt;code&gt;Session&lt;/code&gt; when it is closed and re-attach them to the new &lt;code&gt;Session&lt;/code&gt;. So the persistent objects are ones that are kept within &lt;code&gt;HttpSession&lt;/code&gt; &lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s context within a unit of work. You can re-attach an object by calling &lt;code&gt;Session&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;merge&lt;/code&gt; or &lt;code&gt;saveOrUpdate&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// foo is an instance loaded by a previous Session&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// open new session&lt;/span&gt;
&lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beginTransaction&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saveOrUpdate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Use merge() if &amp;quot;foo&amp;quot; might have been loaded already&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Hibernate&amp;nbsp;Integration&lt;/h2&gt;
&lt;p&gt;In practice, we don&amp;#8217;t often need to write our own transaction code. We use Hibernate or Spring&amp;#8217;s HibernateTransactionManager instead. These transaction managers wrap a transaction around method invokation, which requires database accesses. But in essense, they are all doing the same thing as described above: obtain a session, start the transaction, flush the session if needed, commit the transaction, discard the session if needed; roll back transaction and discard session if exception is&amp;nbsp;thrown. &lt;/p&gt;
&lt;p&gt;Transaction&amp;#8217;s boundary can be defined using annotation or clear &lt;a href="https://community.jboss.org/wiki/SessionHandlingWithAOP"&gt;point cut (&lt;span class="caps"&gt;AOP&lt;/span&gt;)&lt;/a&gt;; transactions can be nested; A business transaction might not involve only Hibernate&amp;#8217;s transaction but other resources&amp;#8217; transactions as well; nested transactions. We will discuss these matters in next article on&amp;nbsp;hibernate. &lt;/p&gt;</summary><category term="hibernate"></category><category term="java"></category></entry><entry><title>Uploading file using Javascript</title><link href="http://khuevu.com/2013/01/05/fileupload-javascript.html" rel="alternate"></link><updated>2013-01-05T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2013-01-05:2013/01/05/fileupload-javascript.html</id><summary type="html">&lt;p&gt;A few months ago, I have written a &lt;a href="https://chrome.google.com/webstore/detail/social-snap/bnhlaifngpmodnnkpebagndhomlcnaed"&gt;chrome extension&lt;/a&gt; for instant sharing of captured content of a webpage to Facebook. So one of the requirement is that the captured image data is uploaded to Facebook. The familiar web flow of uploading a file to serverwould be presenting user with upload file form (html form with enctype=&amp;#8221;multipart/form-data&amp;#8221;) and let them select the&amp;nbsp;file: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://graph.facebook.com/me/photos?access_token=...&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Filename:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So how do we accomplish it in Javascript? First, we need to know what is actually sent in the body of the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request when a file is uploaded using the above method. Well, the body of request originated from a &amp;#8220;multiplart/form-data&amp;#8221; form is indeed a multipart message. The message follows the &lt;a href="http://en.wikipedia.org/wiki/MIME"&gt;&lt;span class="caps"&gt;MIME&lt;/span&gt; internet standard&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MIME&lt;/span&gt;&amp;nbsp;standard&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;MIME&lt;/span&gt; was intended to be the standard for describing content of an email. An email messages often consists of multiple part, for example, text, non-&lt;span class="caps"&gt;ASCII&lt;/span&gt; language content, attachement, binary content (images, movies). Its usage, however, have extended far beyond the field of&amp;nbsp;email. &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; uses &lt;span class="caps"&gt;MIME&lt;/span&gt; standard when it needs to transfer data which is binary or and may mix with other data format. One essential thing to know about &lt;span class="caps"&gt;MIME&lt;/span&gt; is that its initial design requirements include requiring no changes to existing email servers, which only support plain text email. Thus you will be right if you expect the &lt;span class="caps"&gt;MIME&lt;/span&gt; message to be sent as plain text message (&lt;span class="caps"&gt;ASCII&lt;/span&gt; characters). The &lt;span class="caps"&gt;HTTP&lt;/span&gt; file upload request we will examine is also in the plain text format like usual &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt;&amp;nbsp;requests. &lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; multipart&amp;nbsp;request:&lt;/h2&gt;
&lt;p&gt;When uploading a photo to facebook, open firebug and observe the&amp;nbsp;request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;

&lt;span class="cp"&gt;#!http&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;capture.png&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;

&lt;span class="n"&gt;PGh0bWw&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CiAgPGhlYWQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;VGhpcyBpcyB0aGUg&lt;/span&gt;
 &lt;span class="n"&gt;Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CiAgPC9ib2R5Pgo8&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; 
 &lt;span class="n"&gt;L2h0bWw&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Cg&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;uploaded&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can observe from the&amp;nbsp;message.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First the &lt;span class="caps"&gt;HTTP&lt;/span&gt; Request header. &lt;code&gt;Content-Type&lt;/code&gt; attribute tell you that the message is a multipart message. Notice the &lt;code&gt;boundary&lt;/code&gt; name value pair. It specifies the string that will be used as the message&amp;#8217;s parts separator. The boundary value can be any string which must not be contain in any other part of the message. It, appended with a &lt;code&gt;--&lt;/code&gt; prefix, is used as boundary between parts. And it is appended &lt;code&gt;--&lt;/code&gt; at both end to mark the end of the&amp;nbsp;message.  &lt;/li&gt;
&lt;li&gt;Each message part has its own headers. &lt;code&gt;Content-Type&lt;/code&gt; is &lt;code&gt;image/png&lt;/code&gt; for the image data. For the comment data, you can leave this header out as it is default to text. &lt;code&gt;Content-Disposition&lt;/code&gt; in &lt;span class="caps"&gt;MIME&lt;/span&gt; standard supposes to tell the receiver how the content should be presented. In &lt;span class="caps"&gt;HTTP&lt;/span&gt;, it is used as request parameter&amp;#8217;s&amp;nbsp;name. &lt;/li&gt;
&lt;li&gt;The request header and request body, as well as part header and body is separated by a blank line (&lt;code&gt;\r\n&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;The image data is base64&amp;nbsp;encoded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this obseravation, we can easily construct the upload file&amp;nbsp;request.  &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uploadFacebookPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;photoUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://graph.facebook.com/me/photos?access_token=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;multipart/form-data; boundary=-----&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;successfully post the message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prepareMIMEMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendAsBinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the above code, the function &lt;code&gt;prepareMIMEMessage&lt;/code&gt; does the construction of the message&amp;nbsp;body. &lt;/p&gt;</summary><category term="javascript"></category><category term="facebook graph"></category></entry><entry><title>Character Encoding with Unicode</title><link href="http://khuevu.com/2012/11/15/basic-unicode.html" rel="alternate"></link><updated>2012-11-15T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2012-11-15:2012/11/15/basic-unicode.html</id><summary type="html">&lt;h2&gt;The Unicode&amp;nbsp;Standard&lt;/h2&gt;
&lt;p&gt;It is always a pay off to understand how character encoding scheme works. Computer only understands number. So there is a need to have a convention to convert from character to number and vice versa. In essence, a string is represented as a array of bytes. A byte can represent 256 values. So it was fine at the begining when only English characters are used in digital world. Each byte simply represent one character. But problem arised when another languages come in with all the different characters. 256 values are not enough to accommodate all of&amp;nbsp;them.    &lt;/p&gt;
&lt;p&gt;You might think of using the same number to represent different characters under different schemes. But that will limit the interchangable of documents and limit a document to contain characters from only one&amp;nbsp;language. &lt;/p&gt;
&lt;p&gt;Long story short, Unicode is a standard attempting to contain the alphabets for every human language. It does so by assigning an integer value (code point) to every alphabet. It is a document which maps every character (&lt;code&gt;LATIN SMALL LETTER A&lt;/code&gt;, for example) to a number (&lt;code&gt;0061&lt;/code&gt; in this&amp;nbsp;case). &lt;/p&gt;
&lt;h2&gt;Unicode&amp;nbsp;Encoding&lt;/h2&gt;
&lt;p&gt;Remember computer stores string as an array of bytes? So how do we have a string of 8-bit values from code points? We use&amp;nbsp;encoding. &lt;/p&gt;
&lt;p&gt;There are a number of different encoding schemes. &lt;span class="caps"&gt;UTF&lt;/span&gt;-32, &lt;span class="caps"&gt;UTF&lt;/span&gt;-16, &lt;span class="caps"&gt;UTF&lt;/span&gt;-8. &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 is the most widely used and supported encoding. It better utilizes memory spaces and and solved compatibilities problems, compared to other encoding like &lt;span class="caps"&gt;UTF&lt;/span&gt;-32. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For code point below 128, it encodes as the corresponding byte value. The 1st 128 code points represent the same character set as in &lt;span class="caps"&gt;ASCII&lt;/span&gt;&amp;nbsp;code.  &lt;/li&gt;
&lt;li&gt;For code point between 128 and 0x7ff, it encodes each code point by two byte values which are between 128 and&amp;nbsp;255&lt;/li&gt;
&lt;li&gt;For code point greater than 0x7ff, it uses 3 to 4 bytes which are between 128 and&amp;nbsp;255. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, there are, in general, two steps in storing a character in&amp;nbsp;computer: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Character&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The encoding of character to code point is handled by the Unicode standard. For the second step, any encoding scheme can be used besides &lt;span class="caps"&gt;UTF&lt;/span&gt;-8. Let&amp;#8217;s say if we use &lt;span class="caps"&gt;ASCII&lt;/span&gt; or &lt;span class="caps"&gt;ISO&lt;/span&gt;-8859-1, if string only contains code point below 128 or 255 respectively, we will have each byte as the same value of the code point. But it contains code point above these value, error will occur (program normally will throw&amp;nbsp;exception).&lt;/p&gt;
&lt;h2&gt;Unicode in&amp;nbsp;Python&lt;/h2&gt;
&lt;p&gt;In Python 2x, the default encoding is Extended &lt;span class="caps"&gt;ASCII&lt;/span&gt;. If you attempt to use a character with code point &amp;gt;= 256, exception will be&amp;nbsp;thrown: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt; chr(40000)&lt;/span&gt;
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;   File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   ValueError: chr() arg not in range(256)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To get the unicode character in the above&amp;nbsp;case:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt; unichr(40000)&lt;/span&gt;
&lt;span class="go"&gt;u&amp;#39;\u9c40&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To create an unicode string, use this&amp;nbsp;syntax:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;quot;a&lt;/span&gt;&lt;span class="se"&gt;\xac\u1234\u20ac\U00008000&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;u&lt;/code&gt; denotes unicode string; &lt;code&gt;\x&lt;/code&gt; for one byte character and &lt;code&gt;\u&lt;/code&gt; for 2 byte character, &lt;code&gt;\U&lt;/code&gt; for 4 byte&amp;nbsp;character. &lt;/p&gt;
&lt;p&gt;Or create a Unicode string by decoding from a 8 bit string. For&amp;nbsp;example: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt; unicode(&amp;#39;a\xc2\xac\xe1\x88\xb4\xe2\x82\xac\xe8\x80\x80&amp;#39;, &amp;#39;utf-8&amp;#39;)&lt;/span&gt;
&lt;span class="go"&gt;u&amp;#39;a\xac\u1234\u20ac\u8000&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Or: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt; s = &amp;#39;a\xc2\xac\xe1\x88\xb4\xe2\x82\xac\xe8\x80\x80&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt; s.decode(&amp;#39;utf-8&amp;#39;)&lt;/span&gt;
&lt;span class="go"&gt;u&amp;#39;a\xac\u1234\u20ac\u8000&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The correct encoding scheme used to decode need to speicify. Otherwise, python will use the default &lt;code&gt;ascii&lt;/code&gt; encoding, which will throw the&amp;nbsp;error: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xc2 in position 1: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In Python 3, the default encoding will be &lt;span class="caps"&gt;UTF&lt;/span&gt;-8. That means:
&lt;em&gt;   All &lt;code&gt;str&lt;/code&gt; object will be &lt;code&gt;unicode&lt;/code&gt; object. No more &lt;code&gt;u'...'&lt;/code&gt;.&lt;br /&gt;
&lt;/em&gt;   Use &lt;code&gt;chr&lt;/code&gt; instead of &lt;code&gt;unichr&lt;/code&gt; for code point &amp;gt;&amp;nbsp;128&lt;/p&gt;</summary><category term="encoding"></category><category term="python"></category></entry><entry><title>Integrate Spring and Hibernate with MySQL master/slave database</title><link href="http://khuevu.com/2012/10/30/spring-hibernate-mysqlreplication.html" rel="alternate"></link><updated>2012-10-30T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2012-10-30:2012/10/30/spring-hibernate-mysqlreplication.html</id><summary type="html">&lt;p&gt;In my previous &lt;a href="http://khuevu.com/2012/10/05/mysqlreplication.html"&gt;post&lt;/a&gt;, we have setup one master and one slave MySQL database. If you write your application to interact with database using jdbc connector, it already has the &lt;a href="http://dev.mysql.com/doc/refman/5.1/en/connector-j-reference-replication-connection.html"&gt;support for database replication&lt;/a&gt;. Basically, you need to use &lt;code&gt;com.mysql.jdbc.ReplicationDriver&lt;/code&gt; and change connection to &lt;code&gt;readOnly&lt;/code&gt; when you want it to direct traffics to slave instances. What if your application interfaces with database through Hibernate &lt;span class="caps"&gt;API&lt;/span&gt;? Hibernate doesn&amp;#8217;t explicitly support the replication. Setting Hibernate or Spring&amp;#8217;s transactions to &lt;code&gt;readOnly&lt;/code&gt; doesn&amp;#8217;t change the underlying jdbc connection to &lt;code&gt;readOnly&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The first thing come to mind is to have two separate instances of &lt;code&gt;Datasource&lt;/code&gt;, one which connection set to &lt;code&gt;readOnly&lt;/code&gt; and one not; and have two Hibernate&amp;#8217;s &lt;code&gt;SessionFactory&lt;/code&gt; contain each. However, this method changes your existing programming model. The second choice is to access the underlying jdbc connection of Hibernate&amp;#8217;s SessionFactory and switch it to &lt;code&gt;readOnly&lt;/code&gt; when it is read&amp;nbsp;operation. &lt;/p&gt;
&lt;p&gt;Here we are going to use Spring&amp;#8217;s AspectJ &lt;span class="caps"&gt;API&lt;/span&gt; to implement this. With Spring AspectJ annotation, we can introduce the switching of connection &lt;code&gt;readOnly&lt;/code&gt; with least amount of change on&amp;nbsp;code.  &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nd"&gt;@Aspect&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConnectionInterceptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SessionFactory&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Around&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@annotation=ReadOnlyConnection&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class="n"&gt;pjp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCurrentSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ConnectionReadOnly&lt;/span&gt; &lt;span class="n"&gt;readOnlyWork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConnectionReadOnly&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readOnlyWork&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pjp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;readOnlyWork&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;switchBack&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readOnlyWork&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next, define the &lt;code&gt;@ReadOnlyConnection&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Retention&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RetentionPolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RUNTIME&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;METHOD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nd"&gt;@interface&lt;/span&gt; &lt;span class="n"&gt;ReadOnlyConnection&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;ConnectionReadOnly&lt;/code&gt; class implements &lt;code&gt;org.hibernate.jdbc.Work&lt;/code&gt; interface.  &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConnectionReadOnly&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Work&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SQLException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setReadOnly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//method to restore the connection state before intercepted&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;switchBack&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt; 
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To enable AspectJ annotation in Spring, you need to add to spring context config&amp;nbsp;file: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connectionInterceptor&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.x.y.z.ConnectionInterceptor&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So for any &lt;code&gt;ReadOnly&lt;/code&gt; method at your &lt;span class="caps"&gt;DAO&lt;/span&gt; layer, you just need to add the &lt;code&gt;@ReadOnlyConnection&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeDaoImpl&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;SomeDao&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SessionFactory&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@ReadOnlyConnection&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Some&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCurrentSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In case you don&amp;#8217;t want to use annotation, you can use Spring&amp;#8217;s xml configuration. For the above example, we will&amp;nbsp;have: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aop:aspect&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connectionAspect&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connectionInterceptor&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connPointCut&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;expression=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;execution(* com.x.y.SomeDaoImpl.get(..))&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aop:around&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;proceed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pointcut-ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connPointCut&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="java"></category><category term="spring"></category><category term="hibernate"></category><category term="mysql"></category><category term="scalability"></category></entry><entry><title>A Tutorial to set up MySQL replication (master/slave) for high scalability</title><link href="http://khuevu.com/2012/10/05/mysqlreplication.html" rel="alternate"></link><updated>2012-10-05T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2012-10-05:2012/10/05/mysqlreplication.html</id><summary type="html">&lt;p&gt;In this tutorial, we will set up two instances of MySQL on your localhost, one master and one slave and enable data replication between the master and the&amp;nbsp;slave.&lt;/p&gt;
&lt;p&gt;There are several options when you want to scale horizontally with a MySQL database including database sharding, using MySQL Cluster with &lt;span class="caps"&gt;NDB&lt;/span&gt; storage or a master/slave setup. You can refer to this &lt;a href="http://www.oshyn.com/_blog/General/post/A_Summary_of_Scaling_Options_for_MySQL/"&gt;link&lt;/a&gt; for a more detailed summary. Master/slave will be suitable for your application if it performs a lot of read operations rather than write. So distributing the read operations accross multiple instance will help reduce the load on one master instance and enables scaling&amp;nbsp;out. &lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;If you haven&amp;#8217;t had MySQL, download it from &lt;a href="http://www.mysql.com/downloads/mysql/"&gt;here&lt;/a&gt;, untar it and extract to a folder of your choice. Add the &lt;code&gt;bin&lt;/code&gt; folder to your &lt;code&gt;PATH&lt;/code&gt; if you don&amp;#8217;t want to specify the full path when invoking the&amp;nbsp;process.  &lt;/p&gt;
&lt;p&gt;Create the folder for config files and data of master and slave&amp;nbsp;instances:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -vp ~/replication/&lt;span class="o"&gt;{&lt;/span&gt;master,slave&lt;span class="o"&gt;}&lt;/span&gt;/&lt;span class="o"&gt;{&lt;/span&gt;conf,data,log&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Run &lt;code&gt;mysql_install_db&lt;/code&gt; script to populate the require &lt;code&gt;mysql&lt;/code&gt; schema for each&amp;nbsp;instance: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;scripts/mysql_install_db --no-defaults --datadir&lt;span class="o"&gt;=&lt;/span&gt;~/replication/master/data
scripts/mysql_install_db --no-defaults --datadir&lt;span class="o"&gt;=&lt;/span&gt;~/replication/slave/data
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Configure master instance: In &lt;code&gt;~/replication/master/conf/&lt;/code&gt;, create &lt;code&gt;my.cnf&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# master my.cnf&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;client&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="nv"&gt;port&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;   3306
&lt;span class="nv"&gt;socket&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;   ~/replication/master/mysqld.sock

&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;socket&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;   ~/replication/master/mysqld.sock
&lt;span class="nv"&gt;port&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;   3306
&lt;span class="nv"&gt;datadir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   ~/replication/master/data
&lt;span class="c"&gt;#basedir: location of your MySQL installation&lt;/span&gt;
&lt;span class="nv"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   ... 
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next, start the master instance using the&amp;nbsp;command: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mysqld --defaults-file&lt;span class="o"&gt;=&lt;/span&gt;~/replication/master/conf/my.cnf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Create &lt;code&gt;replicatedb&lt;/code&gt;, after log in using mysql&amp;nbsp;client: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; CREATE SCHEMA &lt;span class="sb"&gt;`&lt;/span&gt;replicatedb&lt;span class="sb"&gt;`&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Populate some table and data for your schema. Next we need to tell the server to use binary log to log change made to this schema. Add the following lines to the &lt;code&gt;my.cnf&lt;/code&gt; file, under server&amp;nbsp;section: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;log-bin &lt;span class="o"&gt;=&lt;/span&gt;   ~/replication/master/log/mysql-bin.log
binlog-do-db    &lt;span class="o"&gt;=&lt;/span&gt;   replicatedb
server-id   &lt;span class="o"&gt;=&lt;/span&gt;   1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Note that the server-id must be unique between master and slaves. If you want replication for multiple schema, use multiple &lt;code&gt;binlog-do-db&lt;/code&gt; option. Restart the&amp;nbsp;server.&lt;/p&gt;
&lt;h3&gt;Create user for&amp;nbsp;replication:&lt;/h3&gt;
&lt;p&gt;Next create the user which has the &lt;code&gt;REPLICATION SLAVE&lt;/code&gt; permission, which slave instances will use to access master data. In mysql client&amp;nbsp;command: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;slave&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="ss"&gt;`slave`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="n"&gt;REPLICATION&lt;/span&gt; &lt;span class="n"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;slave&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Obtain replication&amp;nbsp;point&lt;/h3&gt;
&lt;p&gt;Still in the mysql client&amp;nbsp;console: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FLUSH&lt;/span&gt; &lt;span class="kp"&gt;TABLES&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;READ&lt;/span&gt; &lt;span class="k"&gt;LOCK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;MASTER&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Output: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+------------------+----------+------------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Binlog_Do_DB&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Binlog_Ignore_DB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+----------+------------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;000016&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="mi"&gt;106&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;replicatedb&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+----------+------------------+------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The above commands will lock the master database, preventing any writes to it, and output the current coordinate of binary log. Then we will dump a database snapshot of the master and restore it to the slave instance. If we don&amp;#8217;t look the database, and new change made to it, there will be inconsistence between the master&amp;#8217;s data and the snapshot, which leads to a corrupted databases on the&amp;nbsp;slave. &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mysql -u root -p replicatedb &amp;gt; replicatedb.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Setup slave&amp;nbsp;instance&lt;/h3&gt;
&lt;p&gt;To setup the slave, instance, create a similar configure file as master instance and change the port number to 3307. Enable &lt;code&gt;binlog&lt;/code&gt; for slave instance if you want it later to serve as the master to other slave instances (which help reduces the sync requests to a single master). And add the following&amp;nbsp;lines:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;
...
server-id   &lt;span class="o"&gt;=&lt;/span&gt;   2
replicate-do-db &lt;span class="o"&gt;=&lt;/span&gt;   replicatedb
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Start slave&amp;nbsp;instance: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mysqld --defaults-file&lt;span class="o"&gt;=&lt;/span&gt;~/replication/slave/conf/my.cnf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Restore the dumped&amp;nbsp;file: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mysql -u root -p -h &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt; -P 3307 replicatedb &amp;lt; replicatedb.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After you has restore the dumped data to slave instance, unlock the table in master&amp;nbsp;instance:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;UNLOCK&lt;/span&gt; &lt;span class="kp"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then we need to tell the slave instance the username and password it is going to use for replication, the coordinate of the bin log file. Login to slave instance using mysql client, type in the following&amp;nbsp;commands:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;STOP&lt;/span&gt; &lt;span class="n"&gt;SLAVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CHANGE&lt;/span&gt; &lt;span class="n"&gt;MASTER&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt;
        &lt;span class="n"&gt;MASTER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;MASTER_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;MASTER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;MASTER_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;MASTER_LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;000016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;MASTER_LOG_POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;START&lt;/span&gt; &lt;span class="n"&gt;SLAVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="mysql"></category><category term="replication"></category><category term="scalability"></category><category term="tutorial"></category></entry><entry><title>Optimize MySQL query by indexing</title><link href="http://khuevu.com/2012/09/20/mysqloptimization.html" rel="alternate"></link><updated>2012-09-20T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2012-09-20:2012/09/20/mysqloptimization.html</id><summary type="html">&lt;p&gt;Database optimization is very crucial for any production grade application to achieve scalability and high performance. MySQL optimization involves different levels, from optimizing &lt;span class="caps"&gt;SQL&lt;/span&gt; queries, configuring system variables, buffer and cache, refining database structure. This article is going to focus on the first part: optimizing &lt;span class="caps"&gt;SQL&lt;/span&gt; queries to reduce response&amp;nbsp;time. &lt;/p&gt;
&lt;p&gt;Optimizing &lt;span class="caps"&gt;SQL&lt;/span&gt; query can be restructuring your query, adding indexes. The &lt;code&gt;(*)sec&lt;/code&gt; returned when a query executed is the benchmark on how different optimizations affect the response time. This article will cover optimization of &lt;span class="caps"&gt;SELECT&lt;/span&gt; statments. The optimization of &lt;span class="caps"&gt;DML&lt;/span&gt; statements will be left for later&amp;nbsp;posts.  &lt;/p&gt;
&lt;h2&gt;The &lt;span class="caps"&gt;EXPLAIN&lt;/span&gt;&amp;nbsp;syntax&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;EXPLAIN&lt;/code&gt; command is a very important tool to understand how query is executed in MySQL. When you type &lt;code&gt;EXPLAIN SELECT...&lt;/code&gt;, MySQL doesn&amp;#8217;t actually perform the query. It just analyzes and tell you how the query will be executed. Some of the output&amp;nbsp;information:  &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;select_type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;possible_keys&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key_len&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;select_type: type of select&amp;nbsp;statement.&lt;/li&gt;
&lt;li&gt;table: table&amp;nbsp;name &lt;/li&gt;
&lt;li&gt;type: Join Types, explains how tables are&amp;nbsp;joined&lt;/li&gt;
&lt;li&gt;possible_keys: possible indexes to&amp;nbsp;choose&lt;/li&gt;
&lt;li&gt;key: actually index&amp;nbsp;chosen&lt;/li&gt;
&lt;li&gt;rows: the estimated number of row need to be&amp;nbsp;examined&lt;/li&gt;
&lt;li&gt;extra: additional&amp;nbsp;information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on these information, we can start optimize our query. When a &lt;code&gt;SELECT&lt;/code&gt; is executed, there are two ways that MySQL will retrieve the records. It can either scan the table row by row or do an index look up to find the records explicitly. Most of the times, the later case is more desirable and can improve performance significantly. Or that is to say, there should be an used index, i.e, key value in result of explain&amp;nbsp;command&lt;/p&gt;
&lt;h3&gt;Simple &lt;span class="caps"&gt;SELECT&lt;/span&gt;&amp;nbsp;example:&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s consider a &lt;code&gt;USER&lt;/code&gt; table: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|---|------------|---------&lt;/span&gt;&lt;span class="c1"&gt;-- |&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kt"&gt;INT&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Do a &lt;code&gt;SELECT&lt;/code&gt; statement based on primary key &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;select_type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;possible_keys&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key_len&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Extra&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|----|-------------|-------|-------|---------------|---------|---------|-------|------|-------|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SIMPLE&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;select_type: &lt;code&gt;SIMPLE&lt;/code&gt;, a single select statement, not a join&amp;nbsp;statment. &lt;/li&gt;
&lt;li&gt;type: &lt;code&gt;const&lt;/code&gt;, at most one matching row, very&amp;nbsp;fast&lt;/li&gt;
&lt;li&gt;key: &lt;code&gt;PRIMARY&lt;/code&gt;, primary key is used for look up&amp;nbsp;operation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s do another &lt;code&gt;SELECT&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;khue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We will see the&amp;nbsp;result:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;select_type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;possible_keys&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key_len&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Extra&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|----|-------------|-------|-------|---------------|---------|---------|-------|------|-------------|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SIMPLE&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Using&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;No key is used to look up the result. MySQL optimizer performs a full table scan (row by row) to retrieve the record. To improve the performance, simply add the index to first_name&amp;nbsp;column: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="nf"&gt;first_name_index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When you have an index on &lt;code&gt;first_name&lt;/code&gt;, optimizer will still be able to use this index when you only select based on part of the key&amp;nbsp;only: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kh%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;#!mysql&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;select_type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;possible_keys&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key_len&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Extra&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|----|-------------|-------|-------|-----------------|-----------------|---------|-------|------|-------------|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SIMPLE&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;first_name_index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;first_name_index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Using&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt; based on multiple&amp;nbsp;columns:&lt;/h3&gt;
&lt;p&gt;How about searching for record based on two&amp;nbsp;column: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;khue&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can add a multiple column&amp;nbsp;index: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="nf"&gt;first_last_index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With the above index, the optimizer will use &lt;code&gt;first_last_index&lt;/code&gt; for &lt;code&gt;SELECT&lt;/code&gt; with &lt;code&gt;WHERE&lt;/code&gt; clause&amp;nbsp;like: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But not&amp;nbsp;for: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What if you have two separate indexes on these two columns? MySQL optimizer will try to &lt;a href="http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html"&gt;merge the indexes&lt;/a&gt; or select one which it think will filter out more&amp;nbsp;rows.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With the above statement, optimizer won&amp;#8217;t use any index, either it is a combined index on two columns &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; or one index on each column. There is a trick to&amp;nbsp;that: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Use &lt;code&gt;EXPLAIN&lt;/code&gt; we will&amp;nbsp;have: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;select_type&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;possible_keys&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|----|--------------|------------|------|----------------|----------------|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;UNION&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="n"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;union1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The optimizer will execute two &lt;span class="caps"&gt;SELECT&lt;/span&gt; statement, one &lt;span class="caps"&gt;PRIMARY&lt;/span&gt; and one &lt;span class="caps"&gt;UNION&lt;/span&gt;, and then &lt;span class="caps"&gt;UNION&lt;/span&gt; the result set. On each &lt;span class="caps"&gt;SELECT&lt;/span&gt; statement, it uses the respective index to retrieve rows. As a result, we achieve better performance than the previous statement, in which MySQL do a full table&amp;nbsp;scan. &lt;/p&gt;
&lt;h2&gt;Is index always&amp;nbsp;necessary?&lt;/h2&gt;
&lt;p&gt;At the begining of this article, I have mentioned that most of the time, key look up is better than full table scan. There is, however, case when full table scan is better. When you have a small table(less than 10 entries), performing a full table scan is faster than key look up. Or when the result set constitutes a large part of the table (more than 30%), full table scan to fetch result rows is faster than key look up and fetch rows&amp;nbsp;later.  &lt;/p&gt;
&lt;p&gt;Fortunately, MySQL optimizer internally takes on the job of calculating the expenses by different approaches and choose the right one for you. It decides whether accessing by index will be more expensive than table scan or vice versa; which index to use among the&amp;nbsp;available.  &lt;/p&gt;
&lt;p&gt;When you think MySQL optimizer is not doing the right thing, you should run &lt;a href="http://dev.mysql.com/doc/refman/5.6/en/analyze-table.html"&gt;&lt;span class="caps"&gt;ANALYZE&lt;/span&gt;&lt;/a&gt; on the table your query applies to. &lt;code&gt;ANALYZE&lt;/code&gt; gives optimizer up-to-date statistical analysis of tables (size, indexes, etc&amp;#8230;) thus, it has a better idea on how much resources is needed for each approach. If the optimizer still fails you after running &lt;code&gt;ANALYZE&lt;/code&gt;, try &lt;a href="http://dev.mysql.com/doc/refman/5.6/en/index-hints.html"&gt;making an index hint&lt;/a&gt; to it. You can suggest, force it to use or ignore an&amp;nbsp;index.  &lt;/p&gt;
&lt;h2&gt;What&amp;nbsp;next?&lt;/h2&gt;
&lt;p&gt;So far we have shortly discussed on how to optimize MySQL query - &lt;span class="caps"&gt;SELECT&lt;/span&gt; statement - through the use of &lt;code&gt;EXPLAIN&lt;/code&gt;. Other topics I want to extend around this theme&amp;nbsp;are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimizing &lt;span class="caps"&gt;DML&lt;/span&gt;&amp;nbsp;statement. &lt;/li&gt;
&lt;li&gt;Configuring system variables and memory&amp;nbsp;usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope I can spend time on them soon. In the mean time, there are plenty of resources to explore on MySQL optimization. You can check out the &lt;a href="http://dev.mysql.com/doc/refman/5.6/en/optimization.html"&gt;Optimization Chapter&lt;/a&gt; on MySQL Reference Manual as a&amp;nbsp;start.&lt;/p&gt;</summary><category term="mysql"></category><category term="optimization"></category></entry><entry><title>Tunnel TCP through HTTP - A Python Implementation</title><link href="http://khuevu.com/2012/09/10/httptunnel.html" rel="alternate"></link><updated>2012-09-10T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2012-09-10:2012/09/10/httptunnel.html</id><summary type="html">&lt;p&gt;Sometimes you find yourself behind a restrictive firewall. It blocks any request with destination port other than 80. You can do little thing like browsing&amp;nbsp;websites. &lt;/p&gt;
&lt;p&gt;The solution, if you want to access an application at other ports, is to direct your traffic to a server outside the firewall listening at port 80. The server then forwards the data to your desired destination. It also returns any response from that destination, i.e, &lt;code&gt;tunneling&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The tunneling can leverage on existing protocol, like &lt;span class="caps"&gt;HTTP&lt;/span&gt;. I have written a simple tunnel program in Python. It contains two components, tunnel client and tunnel&amp;nbsp;server. &lt;/p&gt;
&lt;h3&gt;Tunnel&amp;nbsp;Server&lt;/h3&gt;
&lt;p&gt;It is basically a &lt;span class="caps"&gt;HTTP&lt;/span&gt; server which should resides on the host machine outside the firewall. When the server received a request from client, it relies on the request&amp;#8217;s &lt;span class="caps"&gt;HTTP&lt;/span&gt; method to start the respective action&amp;nbsp;sequence: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;POST&lt;/span&gt; method: Signal a new connection. Send server the host and port of the target address. Server will establish a &lt;span class="caps"&gt;TCP&lt;/span&gt; connection with the target&amp;nbsp;address.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt; method: Signal write request. Server gets data from request&amp;#8217;s payload and send to target through the established &lt;span class="caps"&gt;TCP&lt;/span&gt;&amp;nbsp;connection. &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GET&lt;/span&gt; method: Signal read request. Server get data from target and send back to client as &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;Response. &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt; method: Signal end of connection. Server closes the &lt;span class="caps"&gt;TCP&lt;/span&gt; Connection with&amp;nbsp;target.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can start the server with&amp;nbsp;command: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;python tunneld.py -p 80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The default port server listens to is 9999. Type &lt;code&gt;python tunneld.py -h&lt;/code&gt; for help&amp;nbsp;messages. &lt;/p&gt;
&lt;h3&gt;Tunnel&amp;nbsp;Client&lt;/h3&gt;
&lt;p&gt;Tunnel Client resides on your local machine or any machine within the firewall. It follows the above mentioned protocol to talk to the Tunnel Server. It spawns separate threads to send and receive data from server (through &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;PUT&lt;/span&gt; and &lt;span class="caps"&gt;GET&lt;/span&gt; respectively) and forward back to the local machine through&amp;nbsp;socket.  &lt;/p&gt;
&lt;p&gt;To start the&amp;nbsp;client: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;python tunnel.py [target_host]:[target_port]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;To test the Tunnel, for example, tunneling &lt;span class="caps"&gt;IRC&lt;/span&gt; connection, we use linux &lt;code&gt;nc&lt;/code&gt; command: &lt;/p&gt;
&lt;p&gt;First, start the tunnel&amp;nbsp;service:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;python tunneld.py -p 80&lt;/span&gt;
&lt;span class="go"&gt;python tunnel.py -p 8889 -h localhost:80 irc.freenode.net:6667&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Connect to the client using &lt;code&gt;nc&lt;/code&gt; and send &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;nbsp;messages: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;nc localhost 8889 &lt;/span&gt;
&lt;span class="go"&gt;NICK abcxyz&lt;/span&gt;
&lt;span class="go"&gt;USER abcxyz abcxyz irc.freenode.net :abcxyz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Result: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;:calvino.freenode.net NOTICE * :*** Looking up your hostname...&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net NOTICE * :*** Checking Ident&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net NOTICE * :*** Found your hostname&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net NOTICE * :*** No Ident response&lt;/span&gt;
&lt;span class="go"&gt;NICK abcxyz&lt;/span&gt;
&lt;span class="go"&gt;USER abcxyz abcxyz irc.freenode.net :abcxyz&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 001 abcxyz :Welcome to the freenode Internet Relay Chat Network abcxyz&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 002 abcxyz :Your host is calvino.freenode.net[213.92.8.4/6667], running version ircd-seven-1.1.3&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 003 abcxyz :This server was created Sun Dec 4 2011 at 14:42:47 CET&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 004 abcxyz calvino.freenode.net ircd-seven-1.1.3 DOQRSZaghilopswz CFILMPQbcefgijklmnopqrstvz bkloveqjfI&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 005 abcxyz CHANTYPES=# EXCEPTS INVEX CHANMODES=eIbq,k,flj,CFLMPQcgimnprstz CHANLIMIT=#:120 PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=freenode KNOCK STATUSMSG=@+ CALLERID=g :are supported by this server&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 005 abcxyz CASEMAPPING=rfc1459 CHARSET=ascii NICKLEN=16 CHANNELLEN=50 TOPICLEN=390 ETRACE CPRIVMSG CNOTICE DEAF=D MONITOR=100 FNC TARGMAX=NAMES:1,LIST:1,KICK:1,WHOIS:1,PRIVMSG:4,NOTICE:4,ACCEPT:,MONITOR: :are supported by this server&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 005 abcxyz EXTBAN=$,arx WHOX CLIENTVER=3.0 SAFELIST ELIST=CTU :are supported by this server&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 251 abcxyz :There are 232 users and 70582 invisible on 31 servers&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 252 abcxyz 45 :IRC Operators online&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 253 abcxyz 10 :unknown connection(s)&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 254 abcxyz 34513 :channels formed&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 255 abcxyz :I have 6757 clients and 1 servers&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 265 abcxyz 6757 10768 :Current local users 6757, max 10768&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 266 abcxyz 70814 83501 :Current global users 70814, max 83501&lt;/span&gt;
&lt;span class="go"&gt;:calvino.freenode.net 250 abcxyz :Highest connection count: 10769 (10768 clients) (2194912 connections received)&lt;/span&gt;
&lt;span class="go"&gt;    ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;It needs not be &lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Here I use tunneling tcp packages through &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocol. It is an existing protocol, which gives the reusability to the program. But you can implement your own program on top of the tunneling &lt;span class="caps"&gt;TCP&lt;/span&gt; Connection. You just need to define your own application layer protocol on how the two end of the tunnel communicate, i.e, when to start sending data, when the data&amp;nbsp;ends&amp;#8230;&lt;/p&gt;
&lt;p&gt;You can access the source code of the program &lt;a href="https://github.com/khuevu/http-tunnel"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="http"></category><category term="tcp"></category><category term="tunneling"></category><category term="python"></category></entry><entry><title>Bouncing Balls with Pygame</title><link href="http://khuevu.com/2012/09/01/bouncingball.html" rel="alternate"></link><updated>2012-09-01T00:00:00+08:00</updated><author><name>Vu Minh Khue</name></author><id>tag:khuevu.com,2012-09-01:2012/09/01/bouncingball.html</id><summary type="html">&lt;p&gt;&lt;img alt="Bouncing Balls with Pygame" src="/images/bouncingballs.png" /&gt;&lt;/p&gt;
&lt;p&gt;I have recently played around with Pygame module. It was a fun experience. I decided to use Pygame to write a simple classic bouncing balls&amp;nbsp;simulation.&lt;/p&gt;
&lt;p&gt;You can have a look at the code &lt;a href="https://github.com/khuevu/pygames/tree/master/bouncingball"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Ball object has methods to detect collisions with walls and other balls; callable method &lt;code&gt;update()&lt;/code&gt; to update its position and method &lt;code&gt;draw&lt;/code&gt; to redraw. BallWorld is the Game object containing game logics. It contains the list of balls, loop through all balls to update their positions each&amp;nbsp;refresh.  &lt;/p&gt;
&lt;p&gt;A few things to&amp;nbsp;note: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each ball object has a &lt;code&gt;CollisionResponse&lt;/code&gt; object. &lt;code&gt;CollisionResponse&lt;/code&gt; object contains information on the coming collision: new speed, direction. If the ball is not likely to collide at the moment (not going to collide within a very small &lt;span class="caps"&gt;EPSILON&lt;/span&gt; time), the collision time will be set to&amp;nbsp;infinity.&lt;/li&gt;
&lt;li&gt;Positions of ball objects will be calculated at a fixed time interval (&lt;code&gt;TimeStep&lt;/code&gt;) to calibrate ball movements per frame&amp;nbsp;refresh. &lt;/li&gt;
&lt;li&gt;The use of &lt;span class="caps"&gt;EPSILON&lt;/span&gt; number to estimate comparison as we will not have exact numbers when calculating with float&amp;nbsp;type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun&amp;nbsp;!. &lt;/p&gt;
&lt;p&gt;Ah, well, it is not actually a game per se, but it is fun to watch all the balls bouncing. You can try to adjust the number of balls, speeds,&amp;nbsp;etc&amp;#8230;&lt;/p&gt;</summary><category term="python"></category><category term="pygame"></category></entry></feed>